import { Button } from "@/components/ui/button";
import { useState } from "react";
import { Globe } from "lucide-react";

type Language = 'en' | 'hi';

interface LanguageContent {
  en: string;
  hi: string;
}

const languages: Record<Language, { name: string; flag: string }> = {
  en: { name: 'English', flag: 'üá¨üáß' },
  hi: { name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' }
};

export const LanguageToggle = () => {
  const [currentLanguage, setCurrentLanguage] = useState<Language>('en');

  const toggleLanguage = () => {
    setCurrentLanguage(prev => prev === 'en' ? 'hi' : 'en');
  };

  return (
    <Button 
      variant="outline" 
      size="sm" 
      onClick={toggleLanguage}
      className="flex items-center space-x-2"
    >
      <Globe className="h-4 w-4" />
      <span>{languages[currentLanguage].flag}</span>
      <span>{languages[currentLanguage].name}</span>
    </Button>
  );
};

// Text content provider hook
export const useLanguageContent = () => {
  const [currentLanguage] = useState<Language>('en');

  const t = (content: LanguageContent): string => {
    return content[currentLanguage];
  };

  return { t, currentLanguage };
};

// Common text content
export const textContent = {
  // Navigation
  marketplace: { en: 'Marketplace', hi: '‡§¨‡§æ‡§ú‡§º‡§æ‡§∞' },
  community: { en: 'Community', hi: '‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø' },
  about: { en: 'About', hi: '‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç' },
  contact: { en: 'Contact', hi: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï' },
  signIn: { en: 'Sign In', hi: '‡§∏‡§æ‡§á‡§® ‡§á‡§®' },
  getStarted: { en: 'Get Started', hi: '‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç' },

  // Dashboard
  welcomeBack: { en: 'Welcome back', hi: '‡§µ‡§æ‡§™‡§∏ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à' },
  ceramicArtist: { en: 'Ceramic Artist', hi: '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§¨‡§∞‡•ç‡§§‡§® ‡§ï‡§≤‡§æ‡§ï‡§æ‡§∞' },
  memberSince: { en: 'Member since', hi: '‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§¨‡§®‡•á' },
  totalSavings: { en: 'Total Savings', hi: '‡§ï‡•Å‡§≤ ‡§¨‡§ö‡§§' },
  activeOrders: { en: 'Active Orders', hi: '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ë‡§∞‡•ç‡§°‡§∞' },
  groupOrders: { en: 'Group Orders', hi: '‡§∏‡§Æ‡•Ç‡§π ‡§ë‡§∞‡•ç‡§°‡§∞' },

  // Marketplace
  searchMaterials: { en: 'Search materials or suppliers...', hi: '‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§Ø‡§æ ‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø‡§ï‡§∞‡•ç‡§§‡§æ ‡§ñ‡•ã‡§ú‡•á‡§Ç...' },
  allCategories: { en: 'All Categories', hi: '‡§∏‡§≠‡•Ä ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡§æ‡§Ç' },
  allLocations: { en: 'All Locations', hi: '‡§∏‡§≠‡•Ä ‡§∏‡•ç‡§•‡§æ‡§®' },
  cart: { en: 'Cart', hi: '‡§ï‡§æ‡§∞‡•ç‡§ü' },
  addToCart: { en: 'Add to Cart', hi: '‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç' },
  quote: { en: 'Quote', hi: '‡§ï‡•ã‡§ü‡•á‡§∂‡§®' },
  stock: { en: 'Stock', hi: '‡§∏‡•ç‡§ü‡•â‡§ï' },

  // Common
  save: { en: 'Save', hi: '‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç' },
  cancel: { en: 'Cancel', hi: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç' },
  loading: { en: 'Loading...', hi: '‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' },
  error: { en: 'Error', hi: '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø' },
  success: { en: 'Success', hi: '‡§∏‡§´‡§≤‡§§‡§æ' }
};